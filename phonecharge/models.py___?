from sqlalchemy import (
    Column,
    Integer,
    ForeignKey,
    String,
    DECIMAL,
    TIMESTAMP,
    MetaData,
    create_engine,
)


from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import scoped_session, sessionmaker, relationship



from decouple import config

engine = create_engine(config("SQLALCHEMY_DATABASE_URI"))

conn = engine.connect()

db_session = scoped_session(sessionmaker(autocommit=False, bind=engine))

Base = declarative_base()
Base.query = db_session.query_property()
metadata_obj = MetaData()


class Company(Base):
    __tablename__ = "companies"
    id = Column(String(50), primary_key=True)
    public_id = Column(String(80), nullable=False)
    name = Column(String(80), nullable=False)
    products = relationship('Product', backref='product')

    def __repr__(self):
        return f"{self.name}"

    def save(self):
        db_session.add(self)
        db_session.commit()

    def delete(self):
        db_session.delete(self)
        db_session.commit()
    
    


class Product(Base):
    __tablename__ = "products"
    id = Column(String(50), primary_key=True)
    public_id = Column(String(80), nullable=False)
    value = Column(DECIMAL, nullable=False)
    comany_id = Column( Integer, 
        ForeignKey('company.id'),
    )
    recharges = relationship('Recharge', backref='recharge')


    def __repr__(self):
        return f"{self.public_id}"

    def save(self):
        db_session.add(self)
        db_session.commit()

    def delete(self):
        db_session.delete(self)
        db_session.commit()


class Recharge:
    __tablename__ = "recharges"
    id = Column(String(50), primary_key=True)

    public_id = Column(Integer, unique=True, nullable=False)

    value = Column(DECIMAL, nullable=False)
    created_at = Column(TIMESTAMP)
    phone_number = Column(String(13))
    # comany_id = Column(
    #     ForeignKey(Company.id, ondelete="RESTRICT"),
    # )
    product_id = Column( Integer,
        ForeignKey('product.id'))
    
    

    def __repr__(self):
        return f"{self.public_id}"

    def save(self):
        db_session.add(self)
        db_session.commit()

    def delete(self):
        db_session.delete(self)
        db_session.commit()


class User(Base):
    __tablename__ = "user"
    id = Column(Integer, primary_key=True)
    email = Column(String(200), nullable=False, unique=True)
    password = Column(String(300), nullable=False)

    def __repr__(self):
        return f"{self.public_id}"

    def save(self):
        db_session.add(self)
        db_session.commit()

    def delete(self):
        db_session.delete(self)
        db_session.commit()


def init_db():
    metadata_obj.create_all(bind=engine)


if __name__ == "__main__":
    init_db()
